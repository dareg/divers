#! /usr/bin/env python3

import sys

MAX_LINE_LENGTH = 80


NONE_ST = 0
TABLE_ST = 1
ULIST_ST = 2
TEXTBLOCK_ST = 3
CODEBLOCK_ST = 4
HEADERBLOCK_ST = 5


def get_all_fields(lines):
    all_fields = []
    all_fields_sizes = []
    delimiters = "-:"
    for line in lines:
        fields = [f.strip() for f in line.split("|")[1:-1]]
        all_fields.append(fields)
        if fields and all(c in delimiters for c in fields[0]):
            # ignore separator line for size alculation
            continue

        all_fields_sizes.append([len(f) for f in fields])

    max_sizes = [max(i) for i in zip(*all_fields_sizes)]
    return max_sizes, all_fields


def format_table(lines):
    maxs, all_fields = get_all_fields(lines)
    newlines = ""
    delimiters = "-:"
    for fields in all_fields:
        newline = ""
        for i, field in enumerate(fields):
            if field and all(c in delimiters for c in field):
                num_hyphen = maxs[i]
                prefix = 0
                suffix = 0

                if field.startswith(":"):
                    prefix = 1
                    num_hyphen = num_hyphen - 1

                if field.endswith(":"):
                    suffix = 1
                    num_hyphen = num_hyphen - 1

                newline = newline + "|" + ":" * prefix + "-" * num_hyphen + ":" * suffix
                continue

            newline = newline + "|" + field
            if len(field) < maxs[i]:
                newline = newline + " " * (maxs[i] - len(field))
        newline = newline + "|"
        newlines = newlines + newline + "\n"
    return newlines[:-1]


def format_text_block(lines):
    newlines = ""
    for line in lines:
        line = line.strip()
        while len(line) > MAX_LINE_LENGTH:
            pos = line.rfind(" ", 0, MAX_LINE_LENGTH + 1)
            if pos != -1:
                newlines = newlines + line[:pos].strip() + "\n"
                line = line[pos:]
            else:
                newlines = newlines + line[:MAX_LINE_LENGTH].strip() + "\n"
                line = line[MAX_LINE_LENGTH:]

        newlines = newlines + line.strip() + "\n"
    return newlines[:-1]


def get_heading_level(line):
    level = 0
    for c in line:
        if c == "#":
            level = level + 1
        else:
            return level


def is_part_of_text_block(line):
    if len(line) == 0:
        return False
    if line.isspace():
        return False
    if line.startswith("#"):
        return False
    if line.startswith("-"):
        return False
    if line.count("|") > 1:
        return False
    return True


def get_leading_spaces(line):
    n = 0
    for c in line:
        if c == " ":
            n = n + 1
        elif c == "\t":
            n = n + 2
        else:
            return "" + " " * n


def main():
    if len(sys.argv) != 3:
        print("Usage: mdformat in.txt out.txt")
        sys.exit(1)

    filename = sys.argv[1]
    if len(sys.argv) > 1:
        outfile = sys.argv[2]

    lines = []
    newlines = []
    with open(filename, "r") as f:
        # add a line to handle textblock or table at end of file without newline
        lines = f.readlines() + [""]

    state = NONE_ST
    start = -1
    i = 0
    space_line = -1
    while i < len(lines):
        line = lines[i]

        if state == NONE_ST:
            if line.strip().startswith("|"):
                state = TABLE_ST
                start = i

            elif line.strip().startswith("#"):
                level = get_heading_level(line)
                # add a space before title if there wasn't already one
                if not i == space_line + 1:
                    newlines.append("")
                line = "#" * level + " " + line[level:].strip()
                newlines.append(line)

            elif line.strip().startswith("---"):
                state = HEADERBLOCK_ST
                newlines.append(line.strip())

            elif line.strip().startswith("-"):
                ls = get_leading_spaces(lines[i])
                line = ls + "- " + line[1:].strip()
                newlines.append(line)

            elif line.isspace():
                if not i == space_line + 1:
                    newlines.append("")
                space_line = i

            elif line.strip():
                state = TEXTBLOCK_ST
                start = i

        elif state == TABLE_ST:
            if not line.strip().startswith("|"):
                if i - start > 1:
                    # add a space before table if there wasn't already one
                    if not start == space_line + 1:
                        newlines.append("")
                    newlines.append(format_table(lines[start:i]))
                    state = NONE_ST
                    i = i - 1

        elif state == TEXTBLOCK_ST:
            if not is_part_of_text_block(line):
                newlines.append(format_text_block(lines[start:i]).strip())
                state = NONE_ST
                i = i - 1

        elif state == HEADERBLOCK_ST:
            if line.strip().startswith("---"):
                state = NONE_ST
            newlines.append(line.strip())

        i = i + 1

    with open(outfile, "w") as f:
        for line in newlines:
            print(line, file=f)


if __name__ == "__main__":
    main()
